import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import scrollIntoView from 'scroll-into-view-if-needed';
import React, { useCallback, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { useTypeaheadContext } from '../core/Context';
import { getDisplayName, getMenuItemId, preventInputBlur } from '../utils';
import { optionType } from '../propTypes';
var propTypes = {
  option: optionType.isRequired,
  position: PropTypes.number
};

var menuItemContainer = function menuItemContainer(Component) {
  var displayName = "menuItemContainer(" + getDisplayName(Component) + ")";

  var WrappedMenuItem = function WrappedMenuItem(_ref) {
    var label = _ref.label,
        option = _ref.option,
        position = _ref.position,
        props = _objectWithoutPropertiesLoose(_ref, ["label", "option", "position"]);

    var _useTypeaheadContext = useTypeaheadContext(),
        activeIndex = _useTypeaheadContext.activeIndex,
        id = _useTypeaheadContext.id,
        isOnlyResult = _useTypeaheadContext.isOnlyResult,
        items = _useTypeaheadContext.items,
        onActiveItemChange = _useTypeaheadContext.onActiveItemChange,
        onInitialItemChange = _useTypeaheadContext.onInitialItemChange,
        onMenuItemClick = _useTypeaheadContext.onMenuItemClick;

    var itemRef = useRef(null);
    useEffect(function () {
      if (position === 0) {
        onInitialItemChange(option);
      }
    }, [position]);
    useEffect(function () {
      if (position === activeIndex) {
        onActiveItemChange(option); // Automatically scroll the menu as the user keys through it.

        var node = itemRef.current;
        node && scrollIntoView(node, {
          block: 'nearest',
          boundary: node.parentNode,
          inline: 'nearest',
          scrollMode: 'if-needed'
        });
      }
    }, [activeIndex, position]);
    var active = isOnlyResult || activeIndex === position; // Update the item's position in the item stack on each render.

    items[position] = option;
    var handleClick = useCallback(function (e) {
      onMenuItemClick(option, e);
      props.onClick && props.onClick(e);
    });
    return React.createElement(Component, _extends({}, props, {
      active: active,
      "aria-label": label,
      "aria-selected": active,
      id: getMenuItemId(id, position),
      onClick: handleClick,
      onMouseDown: preventInputBlur,
      ref: itemRef,
      role: "option"
    }));
  };

  WrappedMenuItem.displayName = displayName;
  WrappedMenuItem.propTypes = propTypes;
  return WrappedMenuItem;
};

export default menuItemContainer;