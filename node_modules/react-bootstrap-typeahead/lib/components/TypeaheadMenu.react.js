"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Highlighter = _interopRequireDefault(require("./Highlighter.react"));

var _Menu = _interopRequireDefault(require("./Menu.react"));

var _MenuItem = _interopRequireDefault(require("./MenuItem.react"));

var _utils = require("../utils");

var propTypes = {
  /**
   * Provides the ability to specify a prefix before the user-entered text to
   * indicate that the selection will be new. No-op unless `allowNew={true}`.
   */
  newSelectionPrefix: _propTypes["default"].string,

  /**
   * Prompt displayed when large data sets are paginated.
   */
  paginationText: _propTypes["default"].string,

  /**
   * Provides a hook for customized rendering of menu item contents.
   */
  renderMenuItemChildren: _propTypes["default"].func
};
var defaultProps = {
  newSelectionPrefix: 'New selection: ',
  paginationText: 'Display additional results...',
  renderMenuItemChildren: function renderMenuItemChildren(option, props, idx) {
    return _react["default"].createElement(_Highlighter["default"], {
      search: props.text
    }, (0, _utils.getOptionLabel)(option, props.labelKey));
  }
};

var TypeaheadMenu = function TypeaheadMenu(props) {
  var labelKey = props.labelKey,
      newSelectionPrefix = props.newSelectionPrefix,
      options = props.options,
      paginationText = props.paginationText,
      renderMenuItemChildren = props.renderMenuItemChildren,
      text = props.text,
      menuProps = (0, _objectWithoutPropertiesLoose2["default"])(props, ["labelKey", "newSelectionPrefix", "options", "paginationText", "renderMenuItemChildren", "text"]);
  var renderMenuItem = (0, _react.useCallback)(function (option, position) {
    var label = (0, _utils.getOptionLabel)(option, labelKey);
    var menuItemProps = {
      disabled: (0, _utils.getOptionProperty)(option, 'disabled'),
      label: label,
      option: option,
      position: position
    };

    if (option.customOption) {
      return _react["default"].createElement(_MenuItem["default"], (0, _extends2["default"])({}, menuItemProps, {
        className: "rbt-menu-custom-option",
        key: position,
        label: newSelectionPrefix + label
      }), newSelectionPrefix, _react["default"].createElement(_Highlighter["default"], {
        search: text
      }, label));
    }

    if (option.paginationOption) {
      return _react["default"].createElement(_react.Fragment, {
        key: "pagination-item"
      }, _react["default"].createElement(_Menu["default"].Divider, null), _react["default"].createElement(_MenuItem["default"], (0, _extends2["default"])({}, menuItemProps, {
        className: "rbt-menu-pagination-option",
        label: paginationText
      }), paginationText));
    }

    return _react["default"].createElement(_MenuItem["default"], (0, _extends2["default"])({}, menuItemProps, {
      key: position
    }), renderMenuItemChildren(option, props, position));
  });
  return (// Explictly pass `text` so Flow doesn't complain...
    _react["default"].createElement(_Menu["default"], (0, _extends2["default"])({}, menuProps, {
      text: text
    }), options.map(renderMenuItem))
  );
};

TypeaheadMenu.propTypes = propTypes;
TypeaheadMenu.defaultProps = defaultProps;
var _default = TypeaheadMenu;
exports["default"] = _default;