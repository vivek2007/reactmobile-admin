"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _invariant = _interopRequireDefault(require("invariant"));

var _react = _interopRequireWildcard(require("react"));

var _Context = require("../core/Context");

var _utils = require("../utils");

// IE doesn't seem to get the composite computed value (eg: 'padding',
// 'borderStyle', etc.), so generate these from the individual values.
function interpolateStyle(styles, attr, subattr) {
  if (subattr === void 0) {
    subattr = '';
  }

  // Title-case the sub-attribute.
  if (subattr) {
    /* eslint-disable-next-line no-param-reassign */
    subattr = subattr.replace(subattr[0], subattr[0].toUpperCase());
  }

  return ['Top', 'Right', 'Bottom', 'Left'].map(function (dir) {
    return styles[attr + dir + subattr];
  }).join(' ');
}

function copyStyles(inputNode, hintNode) {
  if (!inputNode || !hintNode) {
    return;
  }

  var inputStyle = window.getComputedStyle(inputNode);
  /* eslint-disable no-param-reassign */

  hintNode.style.borderStyle = interpolateStyle(inputStyle, 'border', 'style');
  hintNode.style.borderWidth = interpolateStyle(inputStyle, 'border', 'width');
  hintNode.style.fontSize = inputStyle.fontSize;
  hintNode.style.height = inputStyle.height;
  hintNode.style.lineHeight = inputStyle.lineHeight;
  hintNode.style.margin = interpolateStyle(inputStyle, 'margin');
  hintNode.style.padding = interpolateStyle(inputStyle, 'padding');
  /* eslint-enable no-param-reassign */
}

var Hint = function Hint(_ref) {
  var children = _ref.children,
      className = _ref.className;
  var context = (0, _Context.useTypeaheadContext)();
  var hintText = context.hintText,
      initialItem = context.initialItem,
      inputNode = context.inputNode,
      onAdd = context.onAdd;
  var hintRef = (0, _react.useRef)(null);
  !(_react["default"].Children.count(children) === 1) ? process.env.NODE_ENV !== "production" ? (0, _invariant["default"])(false, 'The `Hint` component expects one child.') : invariant(false) : void 0;
  var onKeyDown = (0, _react.useCallback)(function (e) {
    if ((0, _utils.shouldSelectHint)(e, context)) {
      e.preventDefault(); // Prevent input from blurring on TAB.

      initialItem && onAdd(initialItem);
    }

    children.props.onKeyDown(e);
  });
  (0, _react.useEffect)(function () {
    copyStyles(inputNode, hintRef.current);
  });
  return _react["default"].createElement("div", {
    className: className,
    style: {
      display: 'flex',
      flex: 1,
      height: '100%',
      position: 'relative'
    }
  }, (0, _react.cloneElement)(children, (0, _extends2["default"])({}, children.props, {
    onKeyDown: onKeyDown
  })), _react["default"].createElement("input", {
    "aria-hidden": true,
    className: "rbt-input-hint",
    ref: hintRef,
    readOnly: true,
    style: {
      backgroundColor: 'transparent',
      borderColor: 'transparent',
      boxShadow: 'none',
      color: 'rgba(0, 0, 0, 0.35)',
      left: 0,
      pointerEvents: 'none',
      position: 'absolute',
      top: 0,
      width: '100%'
    },
    tabIndex: -1,
    value: hintText
  }));
};

var _default = Hint;
exports["default"] = _default;