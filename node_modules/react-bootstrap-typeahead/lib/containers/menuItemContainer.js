"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _scrollIntoViewIfNeeded = _interopRequireDefault(require("scroll-into-view-if-needed"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Context = require("../core/Context");

var _utils = require("../utils");

var _propTypes2 = require("../propTypes");

var propTypes = {
  option: _propTypes2.optionType.isRequired,
  position: _propTypes["default"].number
};

var menuItemContainer = function menuItemContainer(Component) {
  var displayName = "menuItemContainer(" + (0, _utils.getDisplayName)(Component) + ")";

  var WrappedMenuItem = function WrappedMenuItem(_ref) {
    var label = _ref.label,
        option = _ref.option,
        position = _ref.position,
        props = (0, _objectWithoutPropertiesLoose2["default"])(_ref, ["label", "option", "position"]);

    var _useTypeaheadContext = (0, _Context.useTypeaheadContext)(),
        activeIndex = _useTypeaheadContext.activeIndex,
        id = _useTypeaheadContext.id,
        isOnlyResult = _useTypeaheadContext.isOnlyResult,
        items = _useTypeaheadContext.items,
        onActiveItemChange = _useTypeaheadContext.onActiveItemChange,
        onInitialItemChange = _useTypeaheadContext.onInitialItemChange,
        onMenuItemClick = _useTypeaheadContext.onMenuItemClick;

    var itemRef = (0, _react.useRef)(null);
    (0, _react.useEffect)(function () {
      if (position === 0) {
        onInitialItemChange(option);
      }
    }, [position]);
    (0, _react.useEffect)(function () {
      if (position === activeIndex) {
        onActiveItemChange(option); // Automatically scroll the menu as the user keys through it.

        var node = itemRef.current;
        node && (0, _scrollIntoViewIfNeeded["default"])(node, {
          block: 'nearest',
          boundary: node.parentNode,
          inline: 'nearest',
          scrollMode: 'if-needed'
        });
      }
    }, [activeIndex, position]);
    var active = isOnlyResult || activeIndex === position; // Update the item's position in the item stack on each render.

    items[position] = option;
    var handleClick = (0, _react.useCallback)(function (e) {
      onMenuItemClick(option, e);
      props.onClick && props.onClick(e);
    });
    return _react["default"].createElement(Component, (0, _extends2["default"])({}, props, {
      active: active,
      "aria-label": label,
      "aria-selected": active,
      id: (0, _utils.getMenuItemId)(id, position),
      onClick: handleClick,
      onMouseDown: _utils.preventInputBlur,
      ref: itemRef,
      role: "option"
    }));
  };

  WrappedMenuItem.displayName = displayName;
  WrappedMenuItem.propTypes = propTypes;
  return WrappedMenuItem;
};

var _default = menuItemContainer;
exports["default"] = _default;