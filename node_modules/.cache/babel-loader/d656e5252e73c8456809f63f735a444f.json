{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport invariant from 'invariant';\nimport React, { cloneElement, useCallback, useEffect, useRef } from 'react';\nimport { useTypeaheadContext } from '../core/Context';\nimport { shouldSelectHint } from '../utils'; // IE doesn't seem to get the composite computed value (eg: 'padding',\n// 'borderStyle', etc.), so generate these from the individual values.\n\nfunction interpolateStyle(styles, attr, subattr) {\n  if (subattr === void 0) {\n    subattr = '';\n  } // Title-case the sub-attribute.\n\n\n  if (subattr) {\n    /* eslint-disable-next-line no-param-reassign */\n    subattr = subattr.replace(subattr[0], subattr[0].toUpperCase());\n  }\n\n  return ['Top', 'Right', 'Bottom', 'Left'].map(function (dir) {\n    return styles[attr + dir + subattr];\n  }).join(' ');\n}\n\nfunction copyStyles(inputNode, hintNode) {\n  if (!inputNode || !hintNode) {\n    return;\n  }\n\n  var inputStyle = window.getComputedStyle(inputNode);\n  /* eslint-disable no-param-reassign */\n\n  hintNode.style.borderStyle = interpolateStyle(inputStyle, 'border', 'style');\n  hintNode.style.borderWidth = interpolateStyle(inputStyle, 'border', 'width');\n  hintNode.style.fontSize = inputStyle.fontSize;\n  hintNode.style.height = inputStyle.height;\n  hintNode.style.lineHeight = inputStyle.lineHeight;\n  hintNode.style.margin = interpolateStyle(inputStyle, 'margin');\n  hintNode.style.padding = interpolateStyle(inputStyle, 'padding');\n  /* eslint-enable no-param-reassign */\n}\n\nvar Hint = function Hint(_ref) {\n  var children = _ref.children,\n      className = _ref.className;\n  var context = useTypeaheadContext();\n  var hintText = context.hintText,\n      initialItem = context.initialItem,\n      inputNode = context.inputNode,\n      onAdd = context.onAdd;\n  var hintRef = useRef(null);\n  !(React.Children.count(children) === 1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'The `Hint` component expects one child.') : invariant(false) : void 0;\n  var onKeyDown = useCallback(function (e) {\n    if (shouldSelectHint(e, context)) {\n      e.preventDefault(); // Prevent input from blurring on TAB.\n\n      initialItem && onAdd(initialItem);\n    }\n\n    children.props.onKeyDown(e);\n  });\n  useEffect(function () {\n    copyStyles(inputNode, hintRef.current);\n  });\n  return React.createElement(\"div\", {\n    className: className,\n    style: {\n      display: 'flex',\n      flex: 1,\n      height: '100%',\n      position: 'relative'\n    }\n  }, cloneElement(children, _extends({}, children.props, {\n    onKeyDown: onKeyDown\n  })), React.createElement(\"input\", {\n    \"aria-hidden\": true,\n    className: \"rbt-input-hint\",\n    ref: hintRef,\n    readOnly: true,\n    style: {\n      backgroundColor: 'transparent',\n      borderColor: 'transparent',\n      boxShadow: 'none',\n      color: 'rgba(0, 0, 0, 0.35)',\n      left: 0,\n      pointerEvents: 'none',\n      position: 'absolute',\n      top: 0,\n      width: '100%'\n    },\n    tabIndex: -1,\n    value: hintText\n  }));\n};\n\nexport default Hint;","map":null,"metadata":{},"sourceType":"module"}